 
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
  
 <div class="max-w-4xl mx-auto bg-white p-6 md:p-8 rounded-2xl shadow-xl transition-all duration-300 hover:shadow-2xl">
    <div class="flex items-center justify-center mb-6">
      <div class="bg-indigo-100 p-3 rounded-full mr-4">
        <i class="fas fa-envelope text-indigo-600 text-2xl"></i>
      </div>
      <h1 class="text-2xl md:text-3xl font-bold text-center text-indigo-700 animate__animated animate__fadeIn">
        Email Cloner
      </h1>
    </div>

    <form id="emailForm" class="space-y-6">
      <div class="space-y-2">
        <label for="emailIds" class="block font-medium text-gray-700">Email IDs to Clone</label>
        <div class="relative">
          <textarea 
            id="emailIds" 
            rows="4" 
            class="w-full border border-gray-300 p-3 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all"
            placeholder="Enter email IDs separated by commas"
            required
          ></textarea>
          <div class="absolute bottom-2 right-2 text-xs text-gray-400">
            <span id="emailCount">0</span> emails
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label for="cloningCount" class="block font-medium text-gray-700">Number of Days</label>
          <input 
            type="number" 
            id="cloningCount" 
            min="1" 
            max="30" 
            value="1" 
            class="w-full border border-gray-300 p-3 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all"
            required
          />
        </div>
        <div>
          <label for="timeStrategy" class="block font-medium text-gray-700">Scheduling Strategy</label>
          <select 
            id="timeStrategy" 
            class="w-full border border-gray-300 p-3 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all"
          >
            <option value="smart">Smart Distribution (11AM & 4PM)</option>
            <option value="morning">Morning Only (11AM)</option>
            <option value="afternoon">Afternoon Only (4PM)</option>
            <option value="custom">Custom Times</option>
          </select>
        </div>
      </div>

      <div id="customTimeOptions" class="hidden space-y-4 p-4 bg-gray-50 rounded-lg">
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="startHour" class="block text-sm font-medium text-gray-700">Start Hour</label>
            <input type="number" id="startHour" min="0" max="23" value="11" class="w-full p-2 border rounded">
          </div>
          <div>
            <label for="interval" class="block text-sm font-medium text-gray-700">Interval (minutes)</label>
            <input type="number" id="interval" min="5" max="60" value="5" class="w-full p-2 border rounded">
          </div>
        </div>
      </div>

      <div class="pt-2">
        <button 
          type="submit" 
          id="submitBtn"
          class="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 px-6 rounded-lg font-medium hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-[1.02] shadow-md flex items-center justify-center"
        >
          <i class="fas fa-rocket mr-2"></i>
          <span>Start Cloning Process</span>
        </button>
      </div>
    </form>

    <div class="mt-8">
      <div class="flex justify-between items-center mb-2">
        <h3 class="font-medium text-gray-700">Process Status</h3>
        <div id="statusText" class="text-sm font-medium text-indigo-600">Ready</div>
      </div>
      <div class="bg-gray-200 rounded-full h-2.5">
        <div id="progressBar" class="progress-bar bg-indigo-600 rounded-full h-2.5" style="width: 0%"></div>
      </div>
    </div>

    <div id="logArea" class="mt-6 text-sm bg-gray-50 p-4 rounded-xl border border-gray-200 overflow-y-auto max-h-80 font-mono space-y-2">
      <div class="text-center text-gray-400 py-4">Logs will appear here when the process starts</div>
    </div>

    <div id="stats" class="mt-4 grid grid-cols-3 gap-4 text-center hidden">
      <div class="bg-indigo-50 p-3 rounded-lg">
        <div class="text-indigo-800 font-bold text-xl" id="emailsProcessed">0</div>
        <div class="text-indigo-600 text-sm">Emails</div>
      </div>
      <div class="bg-green-50 p-3 rounded-lg">
        <div class="text-green-800 font-bold text-xl" id="successCount">0</div>
        <div class="text-green-600 text-sm">Success</div>
      </div>
      <div class="bg-red-50 p-3 rounded-lg">
        <div class="text-red-800 font-bold text-xl" id="errorCount">0</div>
        <div class="text-red-600 text-sm">Errors</div>
      </div>
    </div>

     <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script>
    const form = document.getElementById('emailForm');
    const logArea = document.getElementById('logArea');
    const progressBar = document.getElementById('progressBar');
    const statusText = document.getElementById('statusText');
    const statsSection = document.getElementById('stats');
    const emailCount = document.getElementById('emailCount');
    const timeStrategy = document.getElementById('timeStrategy');
    const customTimeOptions = document.getElementById('customTimeOptions');
    const submitBtn = document.getElementById('submitBtn');

    let stats = {
      total: 0,
      success: 0,
      errors: 0
    };

    // Update email count
    document.getElementById('emailIds').addEventListener('input', function() {
      const emails = this.value.split(',').filter(id => id.trim() !== '');
      emailCount.textContent = emails.length;
    });

    // Show/hide custom time options
    timeStrategy.addEventListener('change', function() {
      customTimeOptions.classList.toggle('hidden', this.value !== 'custom');
    });

    function updateStats() {
      document.getElementById('emailsProcessed').textContent = stats.total;
      document.getElementById('successCount').textContent = stats.success;
      document.getElementById('errorCount').textContent = stats.errors;
    }

    function log(message, type = 'info') {
      const colors = {
        info: 'text-gray-800',
        success: 'text-green-600',
        error: 'text-red-600',
        warning: 'text-yellow-600'
      };
      
      const icons = {
        info: 'fa-info-circle',
        success: 'fa-check-circle',
        error: 'fa-times-circle',
        warning: 'fa-exclamation-circle'
      };
      
      if (logArea.firstChild?.textContent.includes("Logs will appear here")) {
        logArea.innerHTML = '';
      }
      
      const entry = document.createElement('div');
      entry.className = `log-entry flex items-start ${colors[type]}`;
      entry.innerHTML = `
        <i class="fas ${icons[type]} mt-1 mr-2"></i>
        <div>${message}</div>
      `;
      logArea.appendChild(entry);
      logArea.scrollTop = logArea.scrollHeight;
      
      // Update stats
      if (type === 'success') stats.success++;
      if (type === 'error') stats.errors++;
      updateStats();
    }

    function updateProgress(percent) {
      progressBar.style.width = `${percent}%`;
      progressBar.classList.toggle('bg-indigo-600', percent < 100);
      progressBar.classList.toggle('bg-green-500', percent === 100);
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const emailIds = document.getElementById('emailIds').value.split(',').map(id => id.trim()).filter(id => id !== '');
      const cloningCount = parseInt(document.getElementById('cloningCount').value, 10);
      const strategy = timeStrategy.value;
      
      if (emailIds.length === 0) {
        log('Please enter at least one email ID', 'error');
        return;
      }
      
      // Reset UI
      logArea.innerHTML = '';
      statsSection.classList.remove('hidden');
      stats = { total: emailIds.length * cloningCount, success: 0, errors: 0 };
      updateStats();
      updateProgress(0);
      statusText.textContent = 'Processing...';
      statusText.className = 'text-sm font-medium text-indigo-600 pulse';
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Processing...';
      
       try {
    log(`üöÄ Starting to clone ${emailIds.length} emails for ${cloningCount} day(s)`, 'info');
    log(`‚è≥ Using scheduling strategy: ${strategy}`, 'info');
    
    const response = await axios.post('/api/clone-emails', { 
      emailIds, 
      cloningCount,
      strategy
    });
    
    log(`‚úÖ ${response.data.message}`, 'success');
    log(`üìä ${response.data.totalCloned} emails cloned, ${response.data.skippedDuplicates} duplicates skipped`, 'info');
        statusText.textContent = 'Completed';
        statusText.className = 'text-sm font-medium text-green-600';
        updateProgress(100);
        
        // Show completion animation
        submitBtn.innerHTML = '<i class="fas fa-check-circle mr-2"></i> Process Complete!';
        submitBtn.className = submitBtn.className.replace('from-indigo-600 to-purple-600', 'from-green-500 to-green-600');
        
        setTimeout(() => {
          submitBtn.disabled = false;
          submitBtn.innerHTML = '<i class="fas fa-rocket mr-2"></i> Start Again';
          submitBtn.className = submitBtn.className.replace('from-green-500 to-green-600', 'from-indigo-600 to-purple-600');
        }, 3000);
      } catch (error) {
        log("‚ùå Error occurred during cloning process", 'error');
        log(error.response?.data?.message || error.message, 'error');
        statusText.textContent = 'Failed';
        statusText.className = 'text-sm font-medium text-red-600';
        
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-rocket mr-2"></i> Try Again';
      }
    });

    // Initialize
    updateStats();
  </script>