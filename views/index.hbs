<div class="flex-bn">
  <h1>Create lists</h1>

  <div class="flex-bn">
    <div class="filter-container mb-20">
  <div class="filter-dropdown">
    <label for="daysFilter">Days:</label>
    <select id="daysFilter" class="filter-select">
      <option value="all">All Days</option>
      <option value="today">Today</option>
      <option value="t+1">T+1 Days</option>
      <option value="t+2">T+2 Days</option>
    </select>
  </div>
  
  <div class="filter-dropdown">
    <label for="modeFilter">Email Mode:</label>
    <select id="modeFilter" class="filter-select">
      <option value="BAU">BAU (Default)</option>
      <option value="re-engagement">Re-engagement</option>
      <option value="re-activation">Re-activation</option>
    </select>
  </div>
</div>

    <button id="openFormBtn" class="btn-primary" type="button">Add Email</button>
    <button id="runBtn" class="btn-primary" type="button">Run Automation</button>
  </div>


</div>

<h4 class="emailCount mb-12">{{emails.length}} Emails</h4>



{{#if hasEmails}}
  <div class="flex">
    {{#each emails}}
      <div class="card">
        <div class="flex-bn flex-bn--alignTop mb-12">
          <div>
            <p class="brand" title="brand">{{this.brand}}</p>
            <p class="campaign" title="campaign: {{this.campaign}}">{{this.campaign}}</p>
          </div>
          <div class="text-right">
            <p class="domain" title="domain">{{this.domain}}</p>
            <p class="count" title="count">{{this.count}}</p>
          </div>
        </div>

        <p class="date mb-12"><span class="js-date" data-iso="{{this.date}}"></span></p>

        <div class="flex-box mb-12">
          <p class="box"><span>Primary</span><br>{{this.primaryListId}}</p>
          <p class="box"><span>Secondary</span><br>{{this.secondaryListId}}</p>
          <p class="box"><span>Send Contacts</span><br>{{this.sendContactListId}}</p>
        </div>

        <div class="flex-bn">
          <p class="edit-date" data-date="{{this.createdAt}}"></p>
          <div class="flex-bn btns">
            <button class="edit-btn" id="edit-btn" title="Edit" 
              data-id="{{this._id}}" 
              data-campaign="{{this.campaign}}"
              data-brand="{{this.brand}}"
              data-count="{{this.count}}"
              data-primary-list-id="{{this.primaryListId}}"
              data-secondary-list-id="{{this.secondaryListId}}"
              data-send-contact-list-id="{{this.sendContactListId}}"
              data-list-percentage="{{this.listPercentage}}"
              data-domain="{{this.domain}}"
              data-date="{{this.date}}"><img src="/assets/edit-svgrepo-com.svg" width="14" height="14"></button>

            <form action="/email/{{this._id}}?_method=DELETE" method="post">
              <button type="submit" id="delete-btn" onclick="return confirm('Are you sure?')" title="Delete"><img src="/assets/delete-svgrepo-com.svg" width="14" height="14"></button>
            </form>
          </div>
        </div>
      </div>

      {{!-- <div class="card">
  <div class="card-header">
    <h2 class="card-title">{{this.brand}}</h2>
    <span class="card-tag">{{this.domain}} <strong>{{this.count}}</strong></span>
  </div>

  <p class="card-subtitle">{{this.campaign}}</p>

  <div class="card-date">📅 <span class="js-date" data-iso="{{this.date}}"></span></div>

  <div class="card-stats">
    <div>
      <label>Primary</label>
      <span>{{this.primaryListId}}</span>
    </div>
    <div>
      <label>Secondary</label>
      <span>{{this.secondaryListId}}</span>
    </div>
    <div>
      <label>Send</label>
      <span>{{this.sendContactListId}}</span>
    </div>
  </div>

  <div class="card-footer">
    <span class="edit-date" data-date="{{this.createdAt}}"></span>
    <div class="card-actions">
      <button class="edit-btn" title="Edit"
        data-id="{{this._id}}" 
        data-campaign="{{this.campaign}}"
        data-brand="{{this.brand}}"
        data-count="{{this.count}}"
        data-primary-list-id="{{this.primaryListId}}"
        data-secondary-list-id="{{this.secondaryListId}}"
        data-send-contact-list-id="{{this.sendContactListId}}"
        data-list-percentage="{{this.listPercentage}}"
        data-domain="{{this.domain}}"
        data-date="{{this.date}}"><img src="/assets/edit-svgrepo-com.svg" width="14" height="14"></button>

      <form action="/email/{{this._id}}?_method=DELETE" method="post">
        <button type="submit" onclick="return confirm('Are you sure?')" title="Delete"><img src="/assets/delete-svgrepo-com.svg" width="14" height="14"></button>
      </form>
    </div>
  </div>
      </div> --}}

    {{/each}}
  </div>
{{else}}
  <h3>No Emails</h3>
{{/if}}

<!-- Modal -->
<div id="emailModal" class="modal" aria-hidden="true" role="dialog" aria-labelledby="modalTitle">
  <div class="modal-content">
    <span id="closeModal" class="close" aria-label="Close">&times;</span>
    <form action="/add-email" method="POST" id="emailForm">
     <h2>Fill the email details</h2>
      <label for="campaign">Campaign:</label>
      <input type="text" id="campaign" name="campaign" required />

      <label for="brand">Brand:</label>
      <input type="text" id="brand" name="brand" required />

      <label for="count">Count:</label>
      <input type="number" id="count" name="count" required />

      <label for="primaryListId">Primary List ID:</label>
      <input type="number" id="primaryListId" name="primaryListId" required />

      <label for="secondaryListId">Secondary List ID:</label>
      <input type="number" id="secondaryListId" name="secondaryListId" />

      <label for="sendContactListId">Send Contacts List ID:</label>
      <input type="number" id="sendContactListId" name="sendContactListId" required/>

      <label for="listPercentage">List Percentage:</label>
      <input type="number" id="listPercentage" name="listPercentage" required />

      <label for="domain">Domain:</label>
      <select id="domain" name="domain" required>
        <option value="" disabled selected>Select a domain</option>
        <option value="Main">Main</option>
        <option value="Sub">Sub</option>
        <option value="Tier 1 - Main">Tier 1 - Main</option>
        <option value="Tier 2 - Main">Tier 2 - Main</option>
        <option value="Tier 0c - Main">Tier 0c - Main</option>
        <option value="Tier 1 - Sub">Tier 1 - Sub</option>
        <option value="Tier 2 - Sub">Tier 2 - Sub</option>
        <option value="Tier 0c - Sub">Tier 0c - Sub</option>
      </select>

      <label for="date">Date:</label>
      <input type="date" id="date" name="date" required />

      <button id="form-btn" type="submit">Submit</button>
    </form>
  </div>
</div>

<!-- Scripts -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Run automation with current filters
 document.getElementById('runBtn').addEventListener('click', async () => {
  const runBtn = document.getElementById('runBtn');
  const originalText = runBtn.textContent;
  
  try {
    runBtn.disabled = true;
    runBtn.textContent = 'Processing...';
    
    const daysFilter = document.getElementById('daysFilter').value;
    const modeFilter = document.getElementById('modeFilter').value;
    
    const response = await fetch('http://localhost:8000/api/create-lists', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        daysFilter,
        modeFilter
      })
    });

    const result = await response.json();
    
    if (!response.ok) {
      // Handle specific error cases
      if (response.status === 404) {
        throw new Error(
          `No campaigns found for:\n` +
          `• Date: ${daysFilter.replace('t+', 'T+')}\n` +
          `• Mode: ${modeFilter}\n\n` +
          `Please check your campaign dates and types.`
        );
      }
      throw new Error(result.error || 'Failed to create lists');
    }

    console.log('✅ Created Lists:', result);
    alert(`Successfully processed ${result.count} campaigns matching:\n` +
          `• Date: ${daysFilter.replace('t+', 'T+')}\n` +
          `• Mode: ${modeFilter}`);
    
  } catch (error) {
    console.error('❌ Failed to create lists:', error);
    alert(error.message);
  } finally {
    runBtn.disabled = false;
    runBtn.textContent = originalText;
  }
});
    // Short campaign name
    document.querySelectorAll(".campaign").forEach(el => {
      el.textContent = `${el.textContent.slice(0,18)}`;
    });

    // Format display dates
    document.querySelectorAll(".js-date").forEach(el => {
      const date = new Date(el.dataset.iso);
      el.textContent = date.toLocaleDateString("en-GB", {
        day: "numeric", month: "short", year: "numeric"
      });
    });

    // Format created/updated timestamp
    document.querySelectorAll(".edit-date").forEach(el => {
      const date = new Date(el.dataset.date);
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = String(date.getFullYear()).slice(-2);
      let hours = date.getHours();
      const minutes = String(date.getMinutes()).padStart(2, '0');
      const ampm = hours >= 12 ? 'pm' : 'am';
      hours = hours % 12 || 12;
      el.textContent = `${day}.${month}.${year} ${hours}.${minutes} ${ampm}`;
    });

    // Modal logic
    const popupForm = document.getElementById("emailModal");
    const form = document.getElementById("emailForm");
    const formBtn = document.getElementById("form-btn");

    const campaignInput = document.getElementById("campaign");
    const brandInput = document.getElementById("brand");
    const countInput = document.getElementById("count");
    const primaryListIdInput = document.getElementById("primaryListId");
    const secondaryListIdInput = document.getElementById("secondaryListId");
    const sendContactListIdInput = document.getElementById("sendContactListId");
    const listPercentageInput = document.getElementById("listPercentage");
    const domainInput = document.getElementById("domain");
    const dateInput = document.getElementById("date");

    document.querySelectorAll(".edit-btn").forEach(button => {
      button.addEventListener("click", () => {
        form.action = `/email/${button.dataset.id}/edit?_method=PUT`;
        formBtn.textContent = "Update";

        campaignInput.value = button.dataset.campaign;
        brandInput.value = button.dataset.brand;
        countInput.value = button.dataset.count;
        primaryListIdInput.value = button.dataset.primaryListId;
        secondaryListIdInput.value = button.dataset.secondaryListId;
        sendContactListIdInput.value = button.dataset.sendContactListId;
        listPercentageInput.value = button.dataset.listPercentage;
        domainInput.value = button.dataset.domain;
        dateInput.value = button.dataset.date;

        popupForm.style.display = "block";
      });
    });

    // Filter functionality
    const emailCards = document.querySelectorAll('.card');
    const daysFilter = document.getElementById('daysFilter');
    const modeFilter = document.getElementById('modeFilter');
    
    [daysFilter, modeFilter].forEach(filter => {
      filter.addEventListener('change', applyFilters);
    });
    
    function applyFilters() {
      const selectedDay = daysFilter.value;
      const selectedMode = modeFilter.value.toLowerCase();
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      emailCards.forEach(card => {
        const dateElement = card.querySelector('.js-date');
        const cardDate = new Date(dateElement.dataset.iso);
        cardDate.setHours(0, 0, 0, 0);
        
        const campaignElement = card.querySelector('.campaign');
        const cardCampaign = campaignElement.textContent.toLowerCase();
        
        // Day filter logic
        let dayMatch = true;
        if (selectedDay !== 'all') {
          if (selectedDay === 'today') {
            dayMatch = cardDate.getTime() === today.getTime();
          } else if (selectedDay === 't+1') {
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            dayMatch = cardDate.getTime() === tomorrow.getTime();
          } else if (selectedDay === 't+2') {
            const dayAfter = new Date(today);
            dayAfter.setDate(dayAfter.getDate() + 2);
            dayMatch = cardDate.getTime() === dayAfter.getTime();
          }
        }
        
        // Mode filter logic
        let modeMatch = true;
        if (selectedMode !== 'bau') {
          modeMatch = cardCampaign.includes(selectedMode);
        } else {
          modeMatch = !cardCampaign.includes('re-engagement') && 
                      !cardCampaign.includes('re-activation');
        }
        
        card.style.display = (dayMatch && modeMatch) ? 'block' : 'none';
      });
      
      // Update email count display
      const visibleCount = document.querySelectorAll('.card[style="display: block;"]').length;
      document.querySelector('h4').textContent = `${visibleCount} Emails`;
    }
    
    // Initialize with BAU filter
    applyFilters();
  });
</script>